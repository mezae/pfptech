"use strict";var ApplicationConfiguration=function(){var applicationModuleName="pfptech",applicationModuleVendorDependencies=["ngResource","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngCkeditor","ngSanitize"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0).hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("tags"),ApplicationConfiguration.registerModule("users"),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/views/view-article.client.view.html"})}]),angular.module("articles").controller("ArticleController",["$scope","$state","$window","$stateParams","Authentication","Articles","Tags","$sce",function($scope,$state,$window,$stateParams,Authentication,Articles,Tags,$sce){function create(){if($scope.articleTags.$valid){var article=new Articles($scope.article);article.$save(function(response){$scope.article=response,$state.go("articles.view",{articleId:article._id})},function(errorResponse){$scope.error=errorResponse.data.message})}else alert("Please tag this article.")}function remove(){var confirmation=$window.prompt("Type DELETE to wipe this article out of existence.");if("DELETE"===confirmation){var article=$scope.article;article.$remove(function(){$state.go("articles.list")})}}function update(){var article=$scope.article;article.$update(function(){$state.go("articles.view",{articleId:article._id},{reload:!1,notify:!0})},function(errorResponse){$scope.error=errorResponse.data.message})}$scope.authentication=Authentication,$scope.departments=["General","Academic Programs","Admissions","Counseling","Executive Office","External Affairs","Finance and Administration","Leadership Development Opportunities","Smart Connections","Undergraduate Affairs"],$scope.$on("clickedSave",function(){"articles.create"===$state.current.name?create():update()}),$scope.$on("clickedRemove",function(){remove()}),$scope.$on("$stateChangeSuccess",function(){$scope.editing=["articles.create","articles.edit"].indexOf($state.current.name)>-1}),$scope.findOne=function(){$scope.tags=Tags.query(),$scope.newtag={name:"",type:""},$scope.editorOptions={language:"en",uiColor:"#FFFFFF"},$stateParams.articleId?($scope.article=Articles.get({articleId:$stateParams.articleId}),$scope.safecontent=$sce.trustAsHtml($scope.article.content)):$scope.article={title:"title",content:"content",tag:""}},$scope.createTag=function(type){$scope.newtag.type=type;var tag=new Tags($scope.newtag);tag.$save(function(response){$scope.tags.push(response),$scope.article[$scope.newtag.type]=response.name,$scope.newtag=null},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("articles").controller("ArticlesController",["$scope","$state","Authentication","Articles","Tags",function($scope,$state,Authentication,Articles,Tags){$scope.departments=["General","Academic Programs","Admissions","Counseling","Executive Office","External Affairs","Finance and Administration","Leadership Development Opportunities","Smart Connections","Undergraduate Affairs"],$scope.find=function(){Authentication.user?Articles.query(function(articles){$scope.articles=_.groupBy(articles,"department"),$scope.tags=Tags.query()}):$state.go("home")}}]),angular.module("articles").controller("WikiHomeController",["$scope","$state","Authentication","Articles","$sce",function($scope,$state,Authentication,Articles,$sce){$scope.authentication=Authentication,$scope.$on("clickedSave",function(){$scope.save()}),$scope.$on("$stateChangeSuccess",function(){$scope.editing="main.edit"===$state.current.name}),$scope.findHome=function(){Articles.get({articleId:"Home"},function(post){$scope.article=post,$scope.safecontent=$sce.trustAsHtml($scope.article.content),$scope.editorOptions={language:"en",uiColor:"#FFFFFF"}})},$scope.save=function(){var article=$scope.article;article.$update(function(){$state.go("main",{},{reload:!1,notify:!0})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("main",{url:"/wikiHome",templateUrl:"modules/articles/views/main.client.view.html"}).state("main.edit",{url:"/edit",templateUrl:"modules/articles/views/main.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$state","$window","Authentication",function($scope,$state,$window,Authentication){$scope.authentication=Authentication,$scope.redirect=function(page){if(["main.edit","articles.create","articles.edit"].indexOf($state.current.name)>-1){var confirmation=$window.confirm("Are you sure you want to leave this page without saving?");confirmation&&$state.go(page)}else $state.go(page)}}]),angular.module("core").controller("HomeController",["$scope","$state","Authentication",function($scope,$state,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$state.go("main")}]),angular.module("articles").controller("SidebarController",["$scope","$rootScope","$window","$state","$stateParams","$location","Authentication","Articles",function($scope,$rootScope,$window,$state,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.$on("$stateChangeSuccess",function(){$scope.editing=["main.edit","articles.create","articles.edit"].indexOf($state.current.name)>-1}),$scope.redirect=function(page){if(["main.edit","articles.create","articles.edit"].indexOf($state.current.name)>-1){var confirmation=$window.confirm("Are you sure you want to leave this page without saving?");confirmation&&$state.go(page)}else $state.go(page)},$scope.user=function(){return $scope.authentication.user},$scope.isAdmin=function(){return"admin"===$scope.authentication.user.roles[0]},$scope.isActive=function(page){return $state.current.name===page},$scope.edit=function(){"main"===$state.current.name?$state.go("main.edit",{},{reload:!1,notify:!0}):$state.go("articles.edit",{articleId:$stateParams.articleId},{reload:!1,notify:!0})},$scope.save=function(){$rootScope.$broadcast("clickedSave")},$scope.cancel=function(){["main.edit","articles.create"].indexOf($state.current.name)>-1?$state.go("main"):$state.go("articles.view",{articleId:$stateParams.articleId},{reload:!1,notify:!0})},$scope.remove=function(){$rootScope.$broadcast("clickedRemove")}}]),angular.module("core").directive("contenteditable",function(){return{restrict:"A",require:"ngModel",link:function(scope,element,attrs,ngModel){function read(){ngModel.$setViewValue(element.html())}ngModel.$render=function(){element.html(ngModel.$viewValue||"")},element.bind("blur keyup change",function(){scope.$apply(read)})}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].roles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.link,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].items[itemIndex].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{isPublic:!1})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){Authentication.user?this.socket=io():$state.go("home"),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("tags").config(["$stateProvider",function($stateProvider){$stateProvider.state("tags",{"abstract":!0,url:"/tags",template:"<ui-view/>"}).state("tags.list",{url:"",templateUrl:"modules/tags/views/list-tags.client.view.html"})}]),angular.module("tags").controller("TagsController",["$scope","$window","$state","Authentication","Tags",function($scope,$window,$state,Authentication,Tags){$scope.authentication=Authentication,$scope.find=function(){"user"===$scope.authentication.user.roles[0]?$state.go("main"):$scope.tags=Tags.query()},$scope.create=function(){if($scope.tag.name){var tag=new Tags($scope.tag);tag.$save(function(response){$scope.tag=null,$scope.tags.push(response)},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.removeTag=function(selected){var confirmation=$window.prompt("Type DELETE to remove the "+selected.name+" "+selected.type);confirmation&&selected.$remove(function(){var oldTagIndex=_.findIndex($scope.tags,selected);$scope.tags.splice(oldTagIndex,1)})}}]),angular.module("tags").factory("Tags",["$resource",function($resource){return $resource("api/tags/:tagId",{tagId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/views/settings/settings.client.view.html"}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("settings.users",{url:"/users",templateUrl:"modules/users/views/settings/manage-users.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/views/authentication/authentication.client.view.html"}).state("authentication.signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/wikiHome"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/wikiHome")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/wikiHome")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Users","Authentication",function($scope,$http,Users,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","Users","Authentication",function($scope,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}]),angular.module("users").controller("ManageUsersController",["$scope","$http","$window","Users","Authentication",function($scope,$http,$window,Users,Authentication){$scope.user=Authentication.user,$scope.findUsers=function(){Users.query(function(response){$scope.staff=response})},$scope.saveProfile=function(){$scope.newUser._id?$scope.updateUserProfile():$scope.signup()},$scope.signup=function(){$http.post("/api/auth/signup",$scope.newUser).success(function(response){$scope.staff.push(response),$scope.newUser=null,$scope.addNewUser=!1}).error(function(response){$scope.error=response.message})},$scope.editUser=function(user,index){"admin"===$scope.user.roles[0]&&($scope.newUser=user,$scope.userIndex=index,$scope.addNewUser=!0)},$scope.cancel=function(){$scope.newUser=$scope.userIndex=null,$scope.addNewUser=!1},$scope.updateUserProfile=function(){$scope.error=null;var user=new Users($scope.newUser);user.$update(function(response){$scope.staff.splice($scope.userIndex,1),$scope.staff.push(response),$scope.cancel()},function(response){$scope.error=response.data.message})},$scope.removeUser=function(){var confirmation=$window.prompt("Type DELETE to remove "+$scope.newUser.displayName+"'s account.");if("DELETE"===confirmation){var user=new Users($scope.newUser);user.$remove(function(){$scope.staff.splice($scope.userIndex,1),$scope.addNewUser=!1},function(response){$scope.error=response.data.message})}}}]),angular.module("users").controller("SettingsController",["$scope","$location","Users","Authentication",function($scope,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/")}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);